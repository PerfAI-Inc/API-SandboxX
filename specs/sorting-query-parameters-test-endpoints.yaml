openapi: 3.0.0
info:
  title: Sorting Query Parameters Test API
  description: API endpoints for testing different sorting behaviors
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Development server

paths:
  /api/users:
    get:
      summary: Get a list of users with correct sorting implementation
      description: |
        Returns a list of users with support for sorting by name or age
        in ascending or descending order.
      parameters:
        - in: query
          name: sort
          schema:
            type: string
            example: +name
          description: |
            Sort parameter with prefix + for ascending, - for descending.
            Examples: +name, -name, +age, -age
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  count:
                    type: integer
                    example: 10
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  timestamp:
                    type: string
                    format: date-time

  /api/products:
    get:
      summary: Get a list of products with correct sorting in different format
      description: |
        Returns a list of products with support for sorting by name, price, or category
        using colon format (field:order).
      parameters:
        - in: query
          name: sortBy
          schema:
            type: string
            example: name:asc
          description: |
            Sort parameter in format field:order.
            Examples: name:asc, name:desc, price:asc, price:desc, category:asc, category:desc
      responses:
        "200":
          description: A list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  count:
                    type: integer
                    example: 10
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
                  timestamp:
                    type: string
                    format: date-time
  /api/orders:
    get:
      summary: Get a list of orders that ignores sorting parameters
      description: |
        Returns a list of orders, but deliberately ignores any sorting parameters.
        Always returns data in the same order.
      parameters:
        - in: query
          name: sortField
          required: true
          schema:
            type: string
            example: date
          description: |
            Ignored field to sort by.
            Examples: date, total, status
        - in: query
          name: sortOrder
          required: true
          schema:
            type: string
            enum: [asc, desc]
            example: asc
          description: Ignored sort direction - either asc or desc
      responses:
        "200":
          description: A list of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  count:
                    type: integer
                    example: 10
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Order"
                  timestamp:
                    type: string
                    format: date-time
                  requestedSort:
                    type: object
                    properties:
                      sortField:
                        type: string
                        example: none
                      sortOrder:
                        type: string
                        example: none

  /api/tasks:
    get:
      summary: Get a list of tasks with buggy sorting implementation
      description: |
        Returns a list of tasks with a buggy sort implementation that always
        sorts in ascending order regardless of the parameter.
      parameters:
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            example: desc
          description: |
            Sort direction parameter that is supposed to determine sort order
            but the implementation always sorts by title in ascending order.
      responses:
        "200":
          description: A list of tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  count:
                    type: integer
                    example: 10
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Task"
                  timestamp:
                    type: string
                    format: date-time
                  requestedOrder:
                    type: string
                    example: desc

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "001"
        name:
          type: string
          example: "Alice Johnson"
        age:
          type: integer
          example: 32
        email:
          type: string
          format: email
          example: "alice@example.com"

    Product:
      type: object
      properties:
        id:
          type: string
          example: "p001"
        name:
          type: string
          example: "Laptop"
        price:
          type: number
          format: float
          example: 1200
        category:
          type: string
          example: "Electronics"

    Order:
      type: object
      properties:
        id:
          type: string
          example: "o001"
        customer:
          type: string
          example: "Alice Johnson"
        total:
          type: number
          format: float
          example: 1580
        date:
          type: string
          format: date
          example: "2025-05-15"
        status:
          type: string
          example: "Delivered"

    Task:
      type: object
      properties:
        id:
          type: string
          example: "t001"
        title:
          type: string
          example: "Complete project proposal"
        priority:
          type: string
          enum: [High, Medium, Low]
          example: "High"
        dueDate:
          type: string
          format: date
          example: "2025-05-25"
        status:
          type: string
          enum: [Pending, "In Progress", "Not Started"]
          example: "Pending"
